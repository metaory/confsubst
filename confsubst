#!/bin/bash

# #### ############ ########################################
# #### INFO: [VARS] ########################################
# #### ############
declare -a FILES
SCRIPT="${0##*/}"
ENVFILE='.env'
VERSION="0.0.1"
VERBOSE=0
SILENCE=0
LOGFILE=/tmp/mxsh.log
OUTPUT=/tmp/mxc

# #### ################### #################################
# #### INFO: [CONFIG_MAPS] #################################
# #### ###################
declare -A COL_MAP=( [0]=6 [1]=2 [2]=4 [3]=3 [4]=1 )
declare -A LBL_MAP=( [0]=TRACE [1]=OK [2]=INFO [3]=WARN [4]=ERROR )

# #### ############## ######################################
# #### INFO: [PRINTS] ######################################
# #### ##############
declare -g "_CX"="$(tput sgr0)"
declare -g "_CB"="$(tput bold)"
for i in {1..10}; do declare -g "_C${i}"="$(tput setaf "${i}")"; done

function _CC { tput setaf "${1}"; shift; printf '%s' "${*}"; tput sgr0; }
function _CO {
  _CC 2 "$1"; shift
  while [ "$1" ]; do
    printf ', '
    _CC 2 "${1}"
    shift
  done
}

# ----------------------------------------------------------

function log {
  local L="$1"
  (( SILENCE )) && return
  (( VERBOSE )) && printf -v VRB '[%s:%s:%03d]' "${FUNCNAME[1]}" "${SCRIPT}" "${BASH_LINENO[0]}"
  printf -v MSG '%s%s %s' "$(_CC "${COL_MAP[${L}]}" "[${LBL_MAP[${L}]:-N}]")" "${VRB:-}" "${*:2}"
  cat >> "$LOGFILE" <<< "$MSG"
  (( L || VERBOSE)) && echo "$MSG"
  (( L >= 4 )) && exit "$1"
}

function log_expand {
  ! (( VERBOSE )) || (( SILENCE )) && return
  while [ "$1" ]; do
    printf '%s%*s%s\n' "${_C6}" -8 "$1" "${_C3}${!1}${_CX}"
    shift
  done
}

# ----------------------------------------------------------

function print_syntax { _CC 2 " confsubst [-elVvqh] [-o DIR] [--] ${_CB}[-]|DIR|FILE...${_CX}" $'\n'; }
function print_version { _CC 2 "${SCRIPT}" "${VERSION}"; }

# ----------------------------------------------------------

function bad_exit {
  printf '%s' "${_C1}"
  printf '%0.s=' $(seq 1 $(( ${#1} + 2 )))
  printf '\n %s\n' "${_C1}${1}"
  printf '%0.s=' $(seq 1 $(( ${#1} + 2 )))
  printf '\n\n%s\n' "${_C4}$ confsubst --help"
  print_syntax
  exit 1
}

# ----------------------------------------------------------

function print_help {
  cat << EOM
$(print_version)
(C) 2024 Yan<metaory@gmail.com

$(_CC 6 'confsubst') - $(_CC 4 'templating and variable interpolation CLI utility')

$(_CC 3 USAGE)
=====
$(print_syntax) $(_CC 8 'With no DIR|FILE..., or when FILE is [-], read STDIN')

$(_CC 3 OPTIONS)
=======
  $(_CO -e '--env <FILE>')      environment overrides
  $(_CO -o '--output <DIR>')    output path
  $(_CO -l '--log <FILE>')      verbose log file
  $(_CO -V --verbose)         be more verbose
  $(_CO -q --quiet --silent) inhibit the usual output
  $(_CO -h --help)            display this help and exit
  $(_CO -v --version)         display version and exit

$(_CC 3 EXAMPLE)
=======
$(_CC 8 '$') $(_CC 4 'confsubst') $(_CC 3  'templates')
$(_CC 8 '$') $(_CC 4 'confsubst') $(_CC 3  'templates/wezterm-color.lua templates/nvim-colors.lua')
$(_CC 8 '$') $(_CC 4 'confsubst') $(_CC 2 '-e .env') -- $(_CC 3 'templates')
$(_CC 8 '$') $(_CC 4 'confsubst') $(_CC 2 '--verbose') $(_CC 3 'templates')
$(_CC 8 '$') $(_CC 4 'confsubst') $(_CC 2 '-o myoutput') - $(_CC 3 "<(ls --zero | tr '\0' ' ')")
$(_CC 8 '$') $(_CC 3 'find . -type f -print0') $(_CC 1 '|') $(_CC 4 'confsubst') $(_CC 2 '-l /tmp/mylog')
EOM
  # $(_CO -f --force)           replace existing destination files
  # $(_CO -I --ignore-modeline) ignore any modeline
}

# #### ############# #######################################
# #### INFO: [PARSE] #######################################
# #### #############
declare -A MOD_OPT

function set_mode_data {
  MOD_OPT=()
  while read -r L; do
    ! [[ $L =~ .*mx([c])?: ]] && continue
    while [[ $L =~ ([a-z]+)=([a-zA-Z0-9_./$\-]+) ]]; do
      MOD_OPT["${BASH_REMATCH[1]}"]="$(envsubst <<< "${BASH_REMATCH[2]}")"
      L=${L/"${BASH_REMATCH[0]}"/}
    done
  done <"$1"
  log 0 "$(declare -p MOD_OPT)"
}

# #### ########################## ##########################
# #### INFO: [REQUIREMENT CHECKS] ##########################
# #### ##########################
command -v envsubst &> /dev/null || log 11 'gnu envsubst command not found (provided by gnu gettext)'
command -v printenv &> /dev/null || log 11 'gnu printenv command not found (provided by gnu coreutils)'

# #### ################## ##################################
# #### INFO: [READ.STDIN] #######################################
# #### ##################
function readstdin { [ ! -t 0 ] && while read -r x ; do FILES+=( "$x" ) ; done; }

# #### ################# ###################################
# #### INFO: [READ.ARGS] ########################################
# #### #################
function readarg {
  while [[ "$1" =~ ^- && ! "$1" == "--" ]]; do case $1 in
    -e | --env) ENVFILE="$2"; shift ;;
    -l | --log) LOGFILE="$2"; shift ;;
    -o | --output) OUTPUT="$2";  shift ;;
    -V | --verbose) VERBOSE=1 ;;
    -q | --quiet | --silent) SILENCE=1 ;;
    -v | --version) print_version; exit ;;
    -h | --help) print_help; exit ;;
    --) break ;;
    -) readstdin ;;
    *) bad_exit BAD_ARG ;;
  esac; shift; done

  for input in "${@}"; do
    [[ -f "$input" ]] && FILES+=( "$input" )
    [[ -d "$input" ]] && mapfile -t tmp < <(find "$input" -type f) || tmp=( )
    FILES+=("${tmp[@]}")
  done

  ! (( "${#FILES[@]}" )) && bad_exit NO_FILE_MATCHED

  log_expand ENVFILE LOGFILE OUTPUT VERBOSE SILENCE FILES
}

# shellcheck source=/dev/null
function readenv {
  [ -e "$ENVFILE" ] && source <(sed \
    -e '/^\(\s*\)#.*/d' \
    -e '/^$/d' \
    -e 's/^\(\w.\+\)=/export \1=/' \
    "$ENVFILE")
}

# #### ############### #####################################
# #### INFO: [PROCESS] #####################################
# #### ###############
function process {
  local C=0
  for F in "${FILES[@]}"; do
    (( C++ ))
    set_mode_data "$F"

    local T="${OUTPUT}/${F#*/}"
    local O="${MOD_OPT[path]:-/dev/null}"

    echo F "$F"
    echo T "$T"
    echo O "$O"
    echo M "${MOD_OPT[*]}"

    envsubst < "${F}" | tee  "${T}" "${O}" &> /dev/null

    ! (( SILENCE )) && printf '%s %s\n' "${_C3}[${C}/${#FILES[@]}]" "${_C4}${F}"
  done
}

function maketmp { mkdir "$OUTPUT" &> /dev/null; }

# #### ############ ########################################
# #### INFO: [MAIN] ########################################
# #### ############
function main {
  readarg "$@"
  readstdin
  readenv
  maketmp
  process
}

main "$@"
